trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: '*****'
  keyVaultName: '****' #Centralized KeyVault
  storageAccountName: '*****' #Centralized Storage Account
  containerName: '******' #Centralized Blob Container
  tfplanBlobName: '*****' #TF plan for especific deployment
  storageAccountResourceGroup: '*****' #Centralized Resource group for storage account
  deploymentResourceGroup: '*****' #Resource group for infrastructure deployment
  region: '*******' #Region for infrastructure deployment

stages:
- stage: DeployingIaCTerraform
  jobs:
    - job: TerraformDeployment
      displayName: 'Install Terraform and Setup Environment'
      steps:
        - checkout: self
        - task: AzureCLI@2
          displayName: 'Fetch Secrets and Set Environment Variables'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: bash
            addSpnToEnvironment: true
            scriptLocation: inlineScript
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$ARM_CLIENT_ID"
              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]$ARM_CLIENT_SECRET"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$ARM_SUBSCRIPTION_ID"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$ARM_TENANT_ID"
        - task: AzureCLI@2
          displayName: 'Check and Create Resource Group'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              RESOURCE_GROUP_NAME='$(deploymentResourceGroup)'
              LOCATION='$(region)'

              # Check if the resource group exists
              RG_EXISTS=$(az group exists --name $RESOURCE_GROUP_NAME)

              if [ "$RG_EXISTS" = "false" ]; then
                echo "Resource group $RESOURCE_GROUP_NAME does not exist. Creating..."
                az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
              else
                echo "Resource group $RESOURCE_GROUP_NAME already exists."
              fi
        - script: |
            ls -la $(System.DefaultWorkingDirectory)
            cat terraform.tfvars
          displayName: 'List directory contents'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: PublishPipelineArtifact@1
          displayName: 'Publish terraform.tfvars'
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform.tfvars'
            artifact: 'terraform-tfvars'
        - script: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update && sudo apt-get install terraform
          displayName: 'Install Terraform'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
- stage: Plan
  dependsOn: DeployingIaCTerraform
  jobs:
    - job: TerraformPlan
      displayName: 'Plan Terraform Deployment'
      steps:
        - task: TerraformTaskV4@4
          displayName: 'Reconfigure Terraform Backend'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: '$(azureServiceConnection)'
            backendServiceArm: '$(azureServiceConnection)'
            backendAzureRmResourceGroupName: '$(storageAccountResourceGroup)' # Centralized resource group for storage account
            backendAzureRmStorageAccountName: '$(storageAccountName)'
            backendAzureRmContainerName: '$(containerName)'
            backendAzureRmKey: 'terraform.tfstate'
            commandOptions: '-reconfigure'
        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: '$(azureServiceConnection)'
            backendServiceArm: '$(azureServiceConnection)'
            backendAzureRmResourceGroupName: '$(deploymentResourceGroup)' # Resource group for infrastructure deployment
            backendAzureRmStorageAccountName: '$(storageAccountName)'
            backendAzureRmContainerName: '$(containerName)'
            backendAzureRmKey: 'terraform.tfstate'
            commandOptions: |
              -out=tfplan -input=false -no-color -var-file=$(System.DefaultWorkingDirectory)/terraform.tfvars -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID)
        - script: |
            terraform show -no-color tfplan > plan_output.log
            if grep -q "No changes. Infrastructure is up-to-date." plan_output.log; then
              echo "No changes detected"
              echo "##vso[task.setvariable variable=terraformPlanChanges;isOutput=true]false"
            else
              echo "Changes detected"
              echo "##vso[task.setvariable variable=terraformPlanChanges;isOutput=true]true"
            fi
          displayName: 'Check for Terraform Plan Changes'
          name: checkChanges
        - publish: $(System.DefaultWorkingDirectory)/tfplan
          artifact: tfplan
          displayName: 'Publish tfplan artifact'
- stage: Apply
  dependsOn: Plan
  variables:
    runApply: $[dependencies.Plan.outputs['TerraformPlan.checkChanges.terraformPlanChanges']]
  condition: eq(variables['runApply'], 'true')
  jobs:
    - job: TerraformApply
      displayName: 'Apply Terraform Plan'
      timeoutInMinutes: 120
      steps:
        # Print the variable indicating plan changes
        - script: |
            echo "terraformPlanChanges: $(terraformPlanChanges)"
          displayName: 'Print terraformPlanChanges Variable'

        # Download the tfplan artifact
        - task: DownloadPipelineArtifact@2
          displayName: 'Download tfplan artifact'
          inputs:
            artifact: 'tfplan'
            targetPath: '$(System.DefaultWorkingDirectory)'

        # Download the terraform.tfvars file
        - task: DownloadPipelineArtifact@2
          displayName: 'Download terraform.tfvars'
          inputs:
            artifact: 'terraform-tfvars'
            targetPath: '$(System.DefaultWorkingDirectory)'

        # List files and check the content of tfplan
        - script: |
            echo "Listing files in the working directory:"
            ls -la $(System.DefaultWorkingDirectory)
            echo "Displaying contents of tfplan:"
            cat $(System.DefaultWorkingDirectory)/tfplan
          displayName: 'Check tfplan content'

        # Reconfigure Terraform Backend (centralized storage)
        - task: TerraformTaskV4@4
          displayName: 'Reconfigure Terraform Backend'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: '$(azureServiceConnection)'
            backendServiceArm: '$(azureServiceConnection)'
            backendAzureRmResourceGroupName: '$(storageAccountResourceGroup)' # Centralized resource group for storage account
            backendAzureRmStorageAccountName: '$(storageAccountName)'
            backendAzureRmContainerName: '$(containerName)'
            backendAzureRmKey: 'terraform.tfstate'
            commandOptions: '-reconfigure'

        # Check and remove any active locks
        - task: AzureCLI@2
          displayName: 'Check and Remove Active Locks'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: bash
            scriptLocation: inlineScript
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            inlineScript: |
              echo "Checking for active Terraform state lock..."
              LOCK_ID=$(terraform show -json $(System.DefaultWorkingDirectory)/tfplan | jq -r '.lock.id')
              if [ "$LOCK_ID" != "null" ]; then
                echo "Found active lock: $LOCK_ID"
                terraform force-unlock -force $LOCK_ID
              else
                echo "No active lock found."
              fi

        # Apply the Terraform plan
        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: '$(azureServiceConnection)'
            commandOptions: "-auto-approve -input=false $(System.DefaultWorkingDirectory)/tfplan"

